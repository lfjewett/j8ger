0x2a:
  decimal: 42
  syntax: ROL
  description: Rotate A Left. The Carry is shifted into bit 0 and the original bit 7 is shifted into the Carry.
  flags: [ 'V', 'N', 'Z', 'C']
  length: 1
  cycles: 2
  mode: Accumulator
  steps:
    - all: [ FETCH ]
    - all: [ BASE, A_OUT_LHB, A_OUT_RHB, LATCHALL, ALU_ADD, ALU_OUT, A_LD, EOC ]

0x26:
  decimal: 38
  syntax: ROL $44
  description: ROL the Zero Page address
  flags: [ 'V', 'N', 'Z', 'C']
  length: 2
  cycles: 5
  mode: Zero Page
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, MAR_LDL, PC_INC ]
    - all: [ BASE, MAR_LOW, RAM_OUT, T_LD ]
    - all: [ BASE, T_OUT_LHB, T_OUT_RHB, LATCHALL, ALU_ADD, MAR_LOW, RAM_IN, EOC ]

0x6a:
  decimal: 106
  syntax: ROR
  description: Rotate A Right
  flags: [ 'V', 'N', 'Z', 'C']
  length: 1
  cycles: 2
  mode: Accumulator
  steps:
    - all: [ FETCH ]
    - all: [ BASE, A_OUT_LHB, LATCHALL, ALU_SHR, A_LD, EOC ]

0x6e:
  decimal: 110
  syntax: ROR $4400
  description: Rotate Right Absolute value
  flags: [ 'V', 'N', 'Z', 'C']
  length: 3
  cycles: 5
  mode: Absolute
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, MAR_LDL, PC_INC ]
    - all: [ BASE, PC_OUT, RAM_OUT, MAR_LDH ]
    - all: [ BASE, MAR_OUT, RAM_OUT, T_LD, PC_INC ]
    - all: [ BASE, T_OUT_LHB, LATCHALL, ALU_SHR, MAR_OUT, RAM_IN, EOC ]

0x4a:
  decimal: 74
  syntax: LSR
  description: Logical Shift Right A
  flags: [ 'V', 'N', 'Z', 'C']
  length: 1
  cycles: 2
  mode: Accumulator
  steps:
    - all: [ FETCH ]
    - all: [ BASE, A_OUT_LHB, ZCIN, LATCHALL, ALU_SHR, A_LD, EOC ]

0x4e:
  decimal: 78
  syntax: LSR $4400
  description: Logical Shift Right Absolute address
  flags: [ 'V', 'N', 'Z', 'C']
  length: 3
  cycles: 5
  mode: Absolute
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, MAR_LDL, PC_INC ]
    - all: [ BASE, PC_OUT, RAM_OUT, MAR_LDH ]
    - all: [ BASE, MAR_OUT, RAM_OUT, T_LD, PC_INC ]
    - all: [ BASE, T_OUT_LHB, ZCIN, LATCHALL, ALU_SHR, MAR_OUT, RAM_IN, EOC ]

0xc9:
  decimal: 201
  syntax: CMP #$44
  description: Compare immediate value with A
  flags: [ 'V', 'N', 'Z', 'C']
  length: 2
  cycles: 3
  mode: Immediate
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, T_LD, PC_INC ]
    - all: [ BASE, A_OUT_RHB, T_OUT_LHB, CIN, LATCHALL, ALU_SUB, T_LD, EOC ]

0xd1:
  decimal: 209
  syntax: CMP ($44),Y
  description: Compare (Indirect),Y value with A
  flags: [ 'V', 'N', 'Z', 'C']
  length: 2
  cycles: 7
  mode: Indirect
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDL, PC_INC ]                          # Load ZP Address byte into MARL
    - all: [ BASE, MAR_LOW, RAM_OUT, Y_OUT_LHB, ICIN, ALU_ADD, ALU_OUT, T_LD, MAR_INC ] # Load LOW ADDR in T, offset by Y
    - all: [ BASE, MAR_LOW, RAM_OUT, ICIN, ALU_ADD, ALU_OUT, MAR_LDH ]                  # Load HIGH ADDR to LDH
    - all: [ BASE, T_OUT_LHB, LH_PASS, MAR_LDL ]                                        # Load T into LDL
    - all: [ BASE, MAR_OUT, RAM_OUT, RH_PASS, T_LD ]
    - all: [ BASE, A_OUT_RHB, T_OUT_LHB, CIN, LATCHALL, ALU_SUB, EOC ]                  # Compare A to Value from RAM(MAR)

0xc4:
  decimal: 196
  syntax: CPY $44
  description: Compare a Zero Page value with Y
  flags: [ 'V', 'N', 'Z', 'C']
  length: 2
  cycles: 3
  mode: Zero Page
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, MAR_LDL, PC_INC ]
    - all: [ BASE, MAR_LOW, RAM_OUT, T_LD ]
    - all: [ BASE, Y_OUT_RHB, T_OUT_LHB, CIN, LATCHALL, ALU_SUB, T_LD, EOC ]

0x25:
  decimal: 37
  syntax: AND $44
  description: Perform a bitwise AND of A with a byte at a Zero Page Address
  flags: [ 'N', 'Z']
  length: 2
  cycles: 5
  mode: Zero Page
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, MAR_LDL, PC_INC ]
    - all: [ BASE, MAR_OUT, RAM_OUT, T_LD ]
    - all: [ BASE, A_OUT_RHB, T_OUT_LHB, LATCHNZ, ALU_AND, ZCIN, A_LD, EOC ]

0x29:
  decimal: 41
  syntax: AND #$44
  description: Perform a bitwise AND of A with an Immediate value
  flags: [ 'N', 'Z']
  length: 2
  cycles: 3
  mode: Immediate
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, T_LD, PC_INC ]
    - all: [ BASE, A_OUT_RHB, T_OUT_LHB, LATCHNZ, ALU_AND, ZCIN, A_LD, EOC ]

0xe0:
  decimal: 224
  syntax: CPX #$44
  description: Compare immediate value with X
  flags: [ 'V', 'N', 'Z', 'C']
  length: 2
  cycles: 3
  mode: Immediate
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, T_LD, PC_INC ]
    - all: [ BASE, X_OUT_RHB, T_OUT_LHB, CIN, LATCHALL, ALU_SUB, T_LD, EOC ]

0x0a:
  decimal: 10
  syntax: ASL
  description: ASL shifts all bits left one position. 0 is shifted into bit 0 and the original bit 7 is shifted into the Carry.
  flags: [ 'V', 'N', 'Z', 'C']
  length: 1
  cycles: 2
  mode: Accumulator
  steps:
    - all: [ FETCH ]
    - all: [ BASE, A_OUT_LHB, A_OUT_RHB, ZCIN, LATCHALL, ALU_ADD, A_LD, EOC ]

0x09:
  decimal: 9
  syntax: ORA #$44
  description: Perform a bitwise OR of A with an Immediate byte
  flags: [ 'N', 'Z']
  length: 2
  cycles: 2
  mode: Immediate
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, XFER_DB, A_OUT_LHB, LATCHNZ, ALU_OR, ZCIN, A_LD, PC_INC, EOC ]
#    - all: [ BASE, A_OUT_RHB, T_OUT_LHB, LATCHNZ, ALU_OR, ZCIN, A_LD, EOC ]


#Affects Flags: N Z C
#
#MODE           SYNTAX       HEX LEN TIM
#Accumulator   ASL A         $0A  1   2
#Zero Page     ASL $44       $06  2   5
#Zero Page,X   ASL $44,X     $16  2   6
#Absolute      ASL $4400     $0E  3   6
#Absolute,X    ASL $4400,X   $1E  3   7
#
#ASL shifts all bits left one position. 0 is shifted into bit 0 and the original bit 7 is shifted into the Carry.
#
#
