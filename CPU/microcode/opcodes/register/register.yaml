---
0xa9:
  decimal: 169
  syntax: LDA #$44
  description: Load the A register with an Immediate value
  flags: [ 'N', 'Z']
  length: 2
  cycles: 2
  mode: Immediate
  steps:
    - all: [ FETCH ]  
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, LATCHNZ, A_LD, PC_INC, EOC ]

0xa5:
  decimal: 165
  syntax: LDA $44
  description: Load the A register with an Zero Page value
  flags: [ 'N', 'Z']
  length: 2
  cycles: 3
  mode: Zero Page
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDL, PC_INC ]
    - all: [ BASE, MAR_LOW, RAM_OUT, RH_PASS, LATCHNZ, A_LD, EOC ]

0xad:
  decimal: 173
  syntax: LDA $4400
  description: Load the A register with Absolute value
  flags: [ 'N', 'Z']
  length: 3
  cycles: 4
  mode: Absolute
  steps:
    - all: [ FETCH ]  
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDL, PC_INC ]              # Load MAR Low and INC PC
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDH ]                      # Load MAR High
    - all: [ BASE, MAR_OUT, RAM_OUT, RH_PASS, LATCHNZ, A_LD, PC_INC, EOC ]  # Use MAR to find value and LD into A, INC PC

# Take the next two bites of the program as a location and add X to it. Load the value found at this new address
# into the A register

0xbd:
  decimal: 189
  syntax: LDA $4400,X
  description: Load A register with Absolute,X value.
  flags: [ 'N', 'Z']
  length: 3
  cycles: 4
  mode: Absolute,X
  steps:
    - all: [ FETCH ]                                                              
    - all: [ BASE, PC_OUT, RAM_OUT, X_OUT_LHB, ICIN, ALU_ADD, ALU_OUT, MAR_LDL, PC_INC ] # Load MAR Low and INC PC 
    - all: [ BASE, PC_OUT, RAM_OUT, ICIN, ALU_ADD, ALU_OUT, MAR_LDH, PC_INC ]            #
    - all: [ BASE, MAR_OUT, RAM_OUT, RH_PASS, LATCHNZ, A_LD, EOC ]                       # Use MAR to LD A, latch nz flags 

# Interpret the next byte of the program as the location in zero page memory;
# interpret the two bytes beginning at that memory location as the lo, hi bytes of a second
# location in memory, and load the Accumulator with the byte at the location obtained by adding Y
# to that second address.

0xb1:
  decimal: 177
  syntax: LDA ($44),Y
  description: Load A register with Indirect,Y value
  flags: [ 'N', 'Z']
  length: 2
  cycles: 6
  mode: Indirect,Y
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDL, PC_INC ]                          # Load low address byte into MARL
    - all: [ BASE, MAR_LOW, RAM_OUT, Y_OUT_LHB, ICIN, ALU_ADD, ALU_OUT, T_LD, MAR_INC ] # Load Low ADDR in T, offset by Y
    - all: [ BASE, MAR_LOW, RAM_OUT, ICIN, ALU_ADD, ALU_OUT, MAR_LDH ]                  # Load Low ADDR to LDH
    - all: [ BASE, T_OUT_LHB, LH_PASS, MAR_LDL ]                                        # Load T into LDL
    - all: [ BASE, MAR_OUT, RAM_OUT, RH_PASS, LATCHNZ, A_LD, EOC ]                      # Load MAR_OUT value into A

0xa2:
  decimal: 162
  syntax: LDX #$44
  description: Load the X Register with the Immediate Value
  flags: [ 'N', 'Z']
  length: 2
  cycles: 3
  mode: Immediate
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, LATCHNZ, X_LD, PC_INC, EOC ]

0xa0:
  decimal: 160
  syntax: LDY #$44
  description: Load the Y Register with the immediate Value
  flags: [ 'N', 'Z']
  length: 2
  cycles: 2
  mode: Immediate
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, LATCHNZ, Y_LD, PC_INC, EOC ]

0x85:
  decimal: 133
  syntax: STA $44
  description: Store value in A to a Zero Page address
  flags: [ ]
  length: 2
  cycles: 4
  mode: Absolute
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDL, PC_INC ]
    - all: [ BASE, MAR_LOW, A_OUT_LHB, LH_PASS, RAM_IN, EOC ]


0x8d:
  decimal: 141
  syntax: STA $4400
  description: Store value in A to the absolute memory address
  flags: [ ]
  length: 3
  cycles: 4
  mode: Absolute
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDL, PC_INC ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDH ]
    - all: [ BASE, MAR_OUT, A_OUT_LHB, LH_PASS, RAM_IN, PC_INC, EOC ]

0x95:
  decimal: 149
  syntax: STA $44,X
  description: Store value in A to Zero Page,X
  flags: [ ]
  length: 2
  cycles: 4
  mode: Zero Page
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, T_LD, PC_INC ]
    - all: [ BASE, T_OUT_RHB, X_OUT_LHB, ICIN, ALU_ADD, ALU_OUT, MAR_LDL ]
    - all: [ BASE, MAR_LOW, RAM_IN, A_OUT_LHB, LH_PASS, EOC ]

0x9d:
  decimal: 157
  syntax: STA $4400,X
  description: Store value in A to Absolute,X
  flags: [ ]
  length: 3
  cycles: 6
  mode: Absolute,X
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDL, PC_INC ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDH, PC_INC ]
    - all: [ BASE, MAR_OUT, XFER_LOW, X_OUT_LHB, ICIN, ALU_ADD, ALU_OUT, MAR_LDL ]
    - all: [ BASE, MAR_OUT, XFER_HIGH, ICIN, ALU_ADD, ALU_OUT, MAR_LDH ]
    - all: [ BASE, MAR_OUT, RAM_IN, A_OUT_LHB, LH_PASS, EOC ]

# Interpret the next byte of the program as the location in zero page memory;
# interpret the two bytes beginning at that memory location as the lo, hi bytes of a second
# location in memory, and store the Accumulator at the location obtained by adding Y
# to that second address.

0x91:
  decimal: 145
  syntax: STA ($44),Y
  description: Store A register with Indirect,Y value
  flags: [ 'N', 'Z']
  length: 2
  cycles: 6
  mode: Indirect,Y
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDL, PC_INC ]                          # Load low address byte into MARL
    - all: [ BASE, MAR_LOW, RAM_OUT, Y_OUT_LHB, ICIN, ALU_ADD, ALU_OUT, T_LD, MAR_INC ] # Load Low ADDR in T, offset by Y
    - all: [ BASE, MAR_LOW, RAM_OUT, ICIN, ALU_ADD, ALU_OUT, MAR_LDH ]                  # Load Low ADDR to LDH
    - all: [ BASE, T_OUT_LHB, LH_PASS, MAR_LDL ]                                        # Load T into LDL
    - all: [ BASE, MAR_OUT, RAM_IN, A_OUT_LHB, LH_PASS, EOC ]                           # Store A

0x8c:
  decimal: 140
  syntax: STY $4400
  description: Store value in Y to Absolute memory address
  flags: [ ]
  length: 3
  cycles: 4
  mode: Absolute
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDL, PC_INC ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDH ]
    - all: [ BASE, MAR_OUT, Y_OUT_LHB, LH_PASS, RAM_IN, PC_INC, EOC ]

0x84:
  decimal: 132
  syntax: STY $44
  description: Store value in Y to Zero Page address
  flags: [ ]
  length: 3
  cycles: 3
  mode: Zero Page
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDL, PC_INC ]
    - all: [ BASE, MAR_LOW, Y_OUT_LHB, LH_PASS, RAM_IN, EOC ]

0x8e:
  decimal: 142
  syntax: STX $4400
  description: Store value in X to the absolute memory address
  flags: [ ]
  length: 3
  cycles: 4
  mode: Absolute
  steps:
    - all: [ FETCH ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDL, PC_INC ]
    - all: [ BASE, PC_OUT, RAM_OUT, RH_PASS, MAR_LDH ]
    - all: [ BASE, MAR_OUT, X_OUT_LHB, LH_PASS, RAM_IN, PC_INC, EOC ]

0xaa:
  decimal: 170
  syntax: TAX
  description: Transfer A to X
  flags: [ 'N', 'Z']
  length: 1
  cycles: 2
  mode: Implied
  steps:
    - all: [ FETCH ]
    - all: [ BASE, A_OUT_LHB, ZCIN, LH_PASS, LATCHNZ, X_LD, EOC ]

0x8a:
  decimal: 138
  syntax: TXA
  description: Transfer X to A
  flags: [ 'N', 'Z']
  length: 1
  cycles: 2
  mode: Implied
  steps:
    - all: [ FETCH ]
    - all: [ BASE, X_OUT_LHB, ZCIN, LH_PASS, LATCHNZ, A_LD, EOC ]

0xa8:
  decimal: 168
  syntax: TAY
  description: Transfer A to Y
  flags: [ 'N', 'Z']
  length: 1
  cycles: 2
  mode: Implied
  steps:
    - all: [ FETCH ]      
    - all: [ BASE, A_OUT_RHB, RH_PASS, LATCHNZ, Y_LD, EOC ]

0x98:
  decimal: 152
  syntax: TYA
  description: Transfer Y to A
  flags: [ 'N', 'Z']
  length: 1
  cycles: 2
  mode: Implied
  steps:
    - all: [ FETCH ]
    - all: [ BASE, Y_OUT_RHB, RH_PASS, LATCHNZ, A_LD, EOC ]
  